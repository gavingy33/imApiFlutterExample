def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.huawei.agconnect' 
apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion 30

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.tencent.qcloud.tim.uikit"
        minSdkVersion 17
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        consumerProguardFiles 'consumer-proguard-rules.txt'
        manifestPlaceholders = [
            XG_ACCESS_ID : "",  // 腾讯云TPNS控制台注册所得ACCESS_ID
            XG_ACCESS_KEY : "",  // 腾讯云TPNS控制台注册所得ACCESS_KEY
        ]
    }
    dependencies {
        // ... 程序其他依赖
        // 华为推送 [VERSION] 为当前最新 SDK 版本号，版本号可在 SDK 下载页查看
        // TPNS Android SDK 自 1.2.1.3 版本起正式支持华为推送 V5 版本，请使用 1.2.1.3 及以上版本的 TPNS 华为依赖以避免集成冲突问题。
        implementation 'com.tencent.tpns:huawei:1.2.3.1-release'      
        
        // HMS Core Push 模块依赖包
        implementation 'com.huawei.hms:push:5.0.2.300'   
        implementation 'com.tencent.tpns:fcm:1.2.3.1-release'  // fcm 推送 [VERSION] 为当前SDK版本号,版本号可在SDK下载页查看
        implementation  'com.google.firebase:firebase-messaging:17.6.0'    
    }
    lintOptions {
        // checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        // abortOnError false
    }
    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}
